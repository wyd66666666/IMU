<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [IMU_BM1270_BMM350\IMU_BM1270_BMM350.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image IMU_BM1270_BMM350\IMU_BM1270_BMM350.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Aug 06 19:13:44 2025
<BR><P>
<H3>Maximum Stack Usage =        768 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; perform_gyro_calibration &rArr; IMU_ReadData &rArr; bmm350_get_compensated_mag_xyz_temp_data &rArr; read_out_raw_data &rArr; bmm350_read_uncomp_mag_temp_data &rArr; bmm350_get_regs
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemManage_Handler</a><BR>
 <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
 <LI><a href="#[ff]">UART_EndTxTransfer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ff]">UART_EndTxTransfer</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from stm32g4xx_it.o(i.BusFault_Handler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[44]">COMP1_2_3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[45]">COMP4_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4f]">CORDIC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[46]">CRS_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[16]">DMA1_Channel1_IRQHandler</a> from stm32g4xx_it.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[17]">DMA1_Channel2_IRQHandler</a> from stm32g4xx_it.o(i.DMA1_Channel2_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[18]">DMA1_Channel3_IRQHandler</a> from stm32g4xx_it.o(i.DMA1_Channel3_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[19]">DMA1_Channel4_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel5_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel6_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3e]">DMA2_Channel1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3f]">DMA2_Channel2_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[40]">DMA2_Channel3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[41]">DMA2_Channel4_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[42]">DMA2_Channel5_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Channel6_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4d]">DMAMUX_OVR_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from stm32g4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[1f]">FDCAN1_IT0_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[20]">FDCAN1_IT1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[50]">FMAC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[48]">FPU_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from stm32g4xx_it.o(i.HardFault_Handler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4c]">I2C3_ER_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4b]">I2C3_EV_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[39]">LPTIM1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4a]">LPUART1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from stm32g4xx_it.o(i.MemManage_Handler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from stm32g4xx_it.o(i.NMI_Handler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[c]">PVD_PVM_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from stm32g4xx_it.o(i.PendSV_Handler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[49]">RNG_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[d]">RTC_TAMP_LSECSS_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[e]">RTC_WKUP_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[47]">SAI1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3a]">SPI3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from stm32g4xx_it.o(i.SVC_Handler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from stm32g4xx_it.o(i.SysTick_Handler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[52]">SystemInit</a> from system_stm32g4xx.o(i.SystemInit) referenced from startup_stm32g431xx.o(.text)
 <LI><a href="#[22]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM16_IRQHandler</a> from stm32g4xx_it.o(i.TIM1_UP_TIM16_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3c]">TIM6_DAC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3d]">TIM7_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3b]">UART4_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[57]">UART_DMAAbortOnError</a> from stm32g4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32g4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[5a]">UART_DMAError</a> from stm32g4xx_hal_uart.o(i.UART_DMAError) referenced from stm32g4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[5a]">UART_DMAError</a> from stm32g4xx_hal_uart.o(i.UART_DMAError) referenced from stm32g4xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[5e]">UART_DMAReceiveCplt</a> from stm32g4xx_hal_uart.o(i.UART_DMAReceiveCplt) referenced from stm32g4xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[5f]">UART_DMARxHalfCplt</a> from stm32g4xx_hal_uart.o(i.UART_DMARxHalfCplt) referenced from stm32g4xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[58]">UART_DMATransmitCplt</a> from stm32g4xx_hal_uart.o(i.UART_DMATransmitCplt) referenced from stm32g4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[59]">UART_DMATxHalfCplt</a> from stm32g4xx_hal_uart.o(i.UART_DMATxHalfCplt) referenced from stm32g4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[43]">UCPD1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32g4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[1d]">USB_HP_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[1e]">USB_LP_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from stm32g4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[53]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32g431xx.o(.text)
 <LI><a href="#[61]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[5d]">bmi2_aux_delay_us</a> from bmi270_bmm350.o(i.bmi2_aux_delay_us) referenced from bmi270_bmm350.o(i.IMU_Init)
 <LI><a href="#[5b]">bmi2_aux_i2c_read</a> from bmi270_bmm350.o(i.bmi2_aux_i2c_read) referenced from bmi270_bmm350.o(i.IMU_Init)
 <LI><a href="#[5c]">bmi2_aux_i2c_write</a> from bmi270_bmm350.o(i.bmi2_aux_i2c_write) referenced from bmi270_bmm350.o(i.IMU_Init)
 <LI><a href="#[64]">bmi2_delay_us</a> from common.o(i.bmi2_delay_us) referenced from common.o(i.bmi2_interface_init)
 <LI><a href="#[62]">bmi2_i2c_read</a> from common.o(i.bmi2_i2c_read) referenced from common.o(i.bmi2_interface_init)
 <LI><a href="#[63]">bmi2_i2c_write</a> from common.o(i.bmi2_i2c_write) referenced from common.o(i.bmi2_interface_init)
 <LI><a href="#[56]">bmp580_delay_us</a> from bmp5_port.o(i.bmp580_delay_us) referenced from bmp5_port.o(i.BMP580_Init)
 <LI><a href="#[54]">bmp580_i2c_read</a> from bmp5_port.o(i.bmp580_i2c_read) referenced from bmp5_port.o(i.BMP580_Init)
 <LI><a href="#[55]">bmp580_i2c_write</a> from bmp5_port.o(i.bmp580_i2c_write) referenced from bmp5_port.o(i.BMP580_Init)
 <LI><a href="#[60]">fputc</a> from usart_printf.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[51]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[53]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(.text)
</UL>
<P><STRONG><a name="[196]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[65]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[197]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[198]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[199]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[19a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[19b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>COMP1_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>COMP4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>CORDIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMAMUX_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>FMAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_TAMP_LSECSS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>UCPD1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_Build_Frame
</UL>

<P><STRONG><a name="[177]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusion_get_attitude
</UL>

<P><STRONG><a name="[19c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[19d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c8]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_simple_calibration
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusion_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_ReadData
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IDLE_Callback
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
</UL>

<P><STRONG><a name="[19f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_out_raw_data
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_get_sensor_data
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsb_to_mps2
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsb_to_dps
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_get_sensor_data
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_get_sensor_data
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsb_to_mps2
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsb_to_dps
</UL>

<P><STRONG><a name="[173]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_simple_calibration
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_quick_gyro_calibration
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_get_calibration_status
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusion_set_params
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_gyro_calibration
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_out_raw_data
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_from_mag
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_get_sensor_data
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_out_raw_data
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsb_to_mps2
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsb_to_dps
</UL>

<P><STRONG><a name="[1a0]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1a1]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1a2]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1a3]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[1a5]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[6f]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[11f]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1a6]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[114]"></a>__ARM_fcmp4</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, fcmp4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fminf
</UL>

<P><STRONG><a name="[1a7]"></a>_fcmp4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fcmp4.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>__fp_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fpstat.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>__ieee_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fpstat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[66]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1a9]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[7f]"></a>ANO_Send_Attitude</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, anony_protocol.o(i.ANO_Send_Attitude))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ANO_Send_Attitude &rArr; ANO_Build_Frame &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_Build_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>ANO_Send_UserData</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, anony_protocol.o(i.ANO_Send_UserData))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ANO_Send_UserData &rArr; ANO_Build_Frame &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_Build_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>BMP580_Init</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, bmp5_port.o(i.BMP580_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = BMP580_Init &rArr; bmp5_set_osr_odr_press_config &rArr; set_standby_mode &rArr; bmp5_set_power_mode &rArr; bmp5_get_power_mode &rArr; bmp5_get_osr_odr_press_config &rArr; bmp5_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_soft_reset
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_set_power_mode
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_set_osr_odr_press_config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>BMP580_ReadData</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, bmp5_port.o(i.BMP580_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BMP580_ReadData &rArr; bmp5_get_sensor_data &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_get_sensor_data
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.DMA1_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[181]"></a>DWT_Delay_Init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, delay.o(i.DWT_Delay_Init))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[bd]"></a>HAL_DMA_Abort</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32g4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[bb]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32g4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, stm32g4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[8c]"></a>HAL_DMA_Init</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32g4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXRequestGenBaseAndMask
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[8f]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32g4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>

<P><STRONG><a name="[91]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32g4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_simple_calibration
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_quick_gyro_calibration
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_gyro_calibration
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>HAL_GPIO_Init</STRONG> (Thumb, 550 bytes, Stack size 56 bytes, stm32g4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
</UL>

<P><STRONG><a name="[d4]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32g4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Wait_Ack
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Read_Byte
</UL>

<P><STRONG><a name="[190]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d0]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32g4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_gyro_calibration
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Wait_Ack
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Stop
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Start
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Send_Byte
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Read_Byte
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_NAck
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Ack
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
</UL>

<P><STRONG><a name="[92]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[fb]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[93]"></a>HAL_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32g4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>HAL_InitTick</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32g4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[96]"></a>HAL_MspInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32g4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_DisableUCPDDeadBattery
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a3]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[98]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32g4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[94]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[fd]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(i.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[99]"></a>HAL_PWREx_DisableUCPDDeadBattery</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(i.HAL_PWREx_DisableUCPDDeadBattery))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[9b]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 638 bytes, Stack size 32 bytes, stm32g4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[9c]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 444 bytes, Stack size 32 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[103]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[104]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[9d]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[9e]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1028 bytes, Stack size 32 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[97]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32g4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[af]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ae]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[b1]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[b3]"></a>HAL_TIMEx_DirectionChangeCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_DirectionChangeCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[b2]"></a>HAL_TIMEx_EncoderIndexCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_EncoderIndexCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>HAL_TIMEx_IndexErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_IndexErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[b5]"></a>HAL_TIMEx_TransitionErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_TransitionErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[a0]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[a4]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[aa]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[a9]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 418 bytes, Stack size 24 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_TransitionErrorCallback
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_IndexErrorCallback
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_EncoderIndexCallback
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_DirectionChangeCallback
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM16_IRQHandler
</UL>

<P><STRONG><a name="[ab]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ac]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ad]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32g4xx_hal_uart_ex.o(i.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[be]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[c2]"></a>HAL_UARTEx_RxFifoFullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_uart_ex.o(i.HAL_UARTEx_RxFifoFullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32g4xx_hal_uart_ex.o(i.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[b8]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32g4xx_hal_uart_ex.o(i.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[c1]"></a>HAL_UARTEx_TxFifoEmptyCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_uart_ex.o(i.HAL_UARTEx_TxFifoEmptyCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[bc]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[b9]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 782 bytes, Stack size 24 bytes, stm32g4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_UART_TxCpltCallback &rArr; uart_tx_start_dma &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_TxFifoEmptyCallback
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxFifoFullCallback
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>HAL_UART_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32g4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[c4]"></a>HAL_UART_MspInit</STRONG> (Thumb, 234 bytes, Stack size 120 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ca]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32g4xx_hal_uart.o(i.HAL_UART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[101]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_uart.o(i.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[7e]"></a>HAL_UART_Transmit</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, stm32g4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IDLE_Callback
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_Build_Frame
</UL>

<P><STRONG><a name="[cd]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32g4xx_hal_uart.o(i.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_start_dma
</UL>

<P><STRONG><a name="[c0]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usart_printf.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UART_TxCpltCallback &rArr; uart_tx_start_dma &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_start_dma
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[102]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_uart.o(i.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>I2C2_Ack</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, bmp580_i2c.o(i.I2C2_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C2_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Read_Byte
</UL>

<P><STRONG><a name="[83]"></a>I2C2_Init</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, bmp580_i2c.o(i.I2C2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2C2_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP580_Init
</UL>

<P><STRONG><a name="[d2]"></a>I2C2_NAck</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, bmp580_i2c.o(i.I2C2_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C2_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Read_Byte
</UL>

<P><STRONG><a name="[d3]"></a>I2C2_Read_Byte</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, bmp580_i2c.o(i.I2C2_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C2_Read_Byte &rArr; I2C2_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_NAck
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Read_nByte
</UL>

<P><STRONG><a name="[d5]"></a>I2C2_Read_nByte</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, bmp580_i2c.o(i.I2C2_Read_nByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C2_Read_nByte &rArr; I2C2_Wait_Ack &rArr; I2C2_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Wait_Ack
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Stop
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Start
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Send_Byte
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp580_i2c_read
</UL>

<P><STRONG><a name="[d7]"></a>I2C2_Send_Byte</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, bmp580_i2c.o(i.I2C2_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Write_nByte
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Read_nByte
</UL>

<P><STRONG><a name="[d6]"></a>I2C2_Start</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bmp580_i2c.o(i.I2C2_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C2_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Write_nByte
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Read_nByte
</UL>

<P><STRONG><a name="[d9]"></a>I2C2_Stop</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, bmp580_i2c.o(i.I2C2_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C2_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Wait_Ack
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Write_nByte
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Read_nByte
</UL>

<P><STRONG><a name="[d8]"></a>I2C2_Wait_Ack</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, bmp580_i2c.o(i.I2C2_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C2_Wait_Ack &rArr; I2C2_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Write_nByte
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Read_nByte
</UL>

<P><STRONG><a name="[da]"></a>I2C2_Write_nByte</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bmp580_i2c.o(i.I2C2_Write_nByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C2_Write_nByte &rArr; I2C2_Wait_Ack &rArr; I2C2_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Wait_Ack
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Stop
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Start
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp580_i2c_write
</UL>

<P><STRONG><a name="[db]"></a>IIC_Ack</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, myiic.o(i.IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDA
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SCL
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[de]"></a>IIC_Init</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, myiic.o(i.IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IIC_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDA
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SCL
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_interface_init
</UL>

<P><STRONG><a name="[df]"></a>IIC_NAck</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, myiic.o(i.IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDA
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SCL
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[e0]"></a>IIC_Read_Byte</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, myiic.o(i.IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SCL
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_nByte
</UL>

<P><STRONG><a name="[e1]"></a>IIC_Read_nByte</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, myiic.o(i.IIC_Read_nByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IIC_Read_nByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_i2c_read
</UL>

<P><STRONG><a name="[e3]"></a>IIC_Send_Byte</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, myiic.o(i.IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDA
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SCL
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write_nByte
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_nByte
</UL>

<P><STRONG><a name="[e2]"></a>IIC_Start</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, myiic.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDA
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SCL
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write_nByte
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_nByte
</UL>

<P><STRONG><a name="[e5]"></a>IIC_Stop</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, myiic.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDA
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SCL
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write_nByte
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_nByte
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
</UL>

<P><STRONG><a name="[e4]"></a>IIC_Wait_Ack</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, myiic.o(i.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDA
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SCL
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write_nByte
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_nByte
</UL>

<P><STRONG><a name="[e6]"></a>IIC_Write_nByte</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, myiic.o(i.IIC_Write_nByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IIC_Write_nByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_i2c_write
</UL>

<P><STRONG><a name="[e7]"></a>IMU_Init</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, bmi270_bmm350.o(i.IMU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = IMU_Init &rArr; bmi2_accel_gyro_conf &rArr; bmi2_get_sensor_config &rArr; get_gyro_gain_update_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_interface_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_error_codes_print_result
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_aux_conf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_accel_gyro_conf
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_enable
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_map_data_int
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>IMU_ReadData</STRONG> (Thumb, 322 bytes, Stack size 80 bytes, bmi270_bmm350.o(i.IMU_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = IMU_ReadData &rArr; bmm350_get_compensated_mag_xyz_temp_data &rArr; read_out_raw_data &rArr; bmm350_read_uncomp_mag_temp_data &rArr; bmm350_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_get_compensated_mag_xyz_temp_data
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsb_to_mps2
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsb_to_dps
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_gyro_calibration
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>MX_DMA_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>MX_GPIO_Init</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>MX_TIM1_Init</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, tim.o(i.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_TIM1_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[dc]"></a>Set_SCL</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, myiic.o(i.Set_SCL))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>

<P><STRONG><a name="[dd]"></a>Set_SDA</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, myiic.o(i.Set_SDA))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[fc]"></a>SystemClock_Config</STRONG> (Thumb, 104 bytes, Stack size 80 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>SystemInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_stm32g4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(.text)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.TIM1_UP_TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM1_UP_TIM16_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 160 bytes, Stack size 28 bytes, stm32g4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[a5]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32g4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[fe]"></a>UART1_IDLE_Callback</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.UART1_IDLE_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART1_IDLE_Callback &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32g4xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[c7]"></a>UART_CheckIdleState</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, stm32g4xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[c6]"></a>UART_SetConfig</STRONG> (Thumb, 582 bytes, Stack size 24 bytes, stm32g4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[cb]"></a>UART_Start_Receive_DMA</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32g4xx_hal_uart.o(i.UART_Start_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>

<P><STRONG><a name="[cc]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, stm32g4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32g4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART1_IRQHandler &rArr; UART1_IDLE_Callback &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IDLE_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[105]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1aa]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[82]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_simple_calibration
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_quick_gyro_calibration
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_get_calibration_status
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP580_Init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_gyro_calibration
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_interface_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_error_codes_print_result
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_simple_calib_data
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_error_codes_print_result
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_aux_conf
</UL>

<P><STRONG><a name="[1ab]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1ac]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[107]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ad]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[174]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusion_use_magnetometer
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusion_set_params
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusion_init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_from_mag
</UL>

<P><STRONG><a name="[1ae]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1af]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[120]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[10a]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[108]"></a>__hardfp_asinf</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, asinf.o(i.__hardfp_asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_asinf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quaternion_to_euler
</UL>

<P><STRONG><a name="[10f]"></a>__hardfp_atan2f</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quaternion_to_euler
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_from_mag
</UL>

<P><STRONG><a name="[111]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_from_mag
</UL>

<P><STRONG><a name="[113]"></a>__hardfp_fminf</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fminf.o(i.__hardfp_fminf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_fminf
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fcmp4
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_acc_confidence
</UL>

<P><STRONG><a name="[115]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsb_to_mps2
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsb_to_dps
</UL>

<P><STRONG><a name="[121]"></a>__hardfp_powf</STRONG> (Thumb, 1606 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_simple_calibration
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b0]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf), UNUSED)

<P><STRONG><a name="[125]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_from_mag
</UL>

<P><STRONG><a name="[126]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector_norm
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quaternion_normalize
</UL>

<P><STRONG><a name="[11d]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[117]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[116]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[11b]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[118]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[11c]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[124]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[10c]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[110]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[10e]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[123]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[10b]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[112]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[1b1]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1b2]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1b3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[10d]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[e9]"></a>bmi270_init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, bmi270.o(i.bmi270_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = bmi270_init &rArr; bmi2_get_gyro_cross_sense &rArr; bmi2_get_feature_data &rArr; get_gyro_cross_sense &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sec_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_gyro_cross_sense
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Init
</UL>

<P><STRONG><a name="[64]"></a>bmi2_delay_us</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(i.bmi2_delay_us))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> common.o(i.bmi2_interface_init)
</UL>
<P><STRONG><a name="[ea]"></a>bmi2_error_codes_print_result</STRONG> (Thumb, 254 bytes, Stack size 0 bytes, common.o(i.bmi2_error_codes_print_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bmi2_error_codes_print_result &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_aux_conf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_accel_gyro_conf
</UL>

<P><STRONG><a name="[17e]"></a>bmi2_extract_input_feat_config</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, bmi2.o(i.bmi2_extract_input_feat_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain_config
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_gain_update_config
</UL>

<P><STRONG><a name="[138]"></a>bmi2_get_feat_config</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, bmi2.o(i.bmi2_get_feat_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain_config
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_gain_update_status
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_gain_update_config
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_cross_sense
</UL>

<P><STRONG><a name="[13a]"></a>bmi2_get_feature_data</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, bmi2.o(i.bmi2_get_feature_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = bmi2_get_feature_data &rArr; get_gyro_cross_sense &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_gain_update_status
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_cross_sense
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_gyro_cross_sense
</UL>

<P><STRONG><a name="[12d]"></a>bmi2_get_gyro_cross_sense</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_get_gyro_cross_sense))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = bmi2_get_gyro_cross_sense &rArr; bmi2_get_feature_data &rArr; get_gyro_cross_sense &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feature_data
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_init
</UL>

<P><STRONG><a name="[13f]"></a>bmi2_get_internal_status</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bmi2.o(i.bmi2_get_internal_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bmi2_get_internal_status &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_config_file
</UL>

<P><STRONG><a name="[139]"></a>bmi2_get_regs</STRONG> (Thumb, 126 bytes, Stack size 160 bytes, bmi2.o(i.bmi2_get_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_soft_reset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sec_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_map_data_int
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_status
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_internal_status
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_load
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aux_config
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_aux_data
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_cross_sense
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_config
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aux_interface_config
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_config
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_aux_interface
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_error_status
</UL>

<P><STRONG><a name="[12e]"></a>bmi2_get_sensor_config</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, bmi2.o(i.bmi2_get_sensor_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = bmi2_get_sensor_config &rArr; get_gyro_gain_update_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_gain_update_config
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_config
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aux_interface_config
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_accel_gyro_conf
</UL>

<P><STRONG><a name="[f1]"></a>bmi2_get_sensor_data</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, bmi2.o(i.bmi2_get_sensor_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = bmi2_get_sensor_data &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_parse_sensor_data
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_ReadData
</UL>

<P><STRONG><a name="[145]"></a>bmi2_get_status</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bmi2.o(i.bmi2_get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bmi2_get_status &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if_aux_not_busy
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_aux_interface
</UL>

<P><STRONG><a name="[62]"></a>bmi2_i2c_read</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, common.o(i.bmi2_i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bmi2_i2c_read &rArr; IIC_Read_nByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_nByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> common.o(i.bmi2_interface_init)
</UL>
<P><STRONG><a name="[63]"></a>bmi2_i2c_write</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, common.o(i.bmi2_i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bmi2_i2c_write &rArr; IIC_Write_nByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write_nByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> common.o(i.bmi2_interface_init)
</UL>
<P><STRONG><a name="[e8]"></a>bmi2_interface_init</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, common.o(i.bmi2_interface_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bmi2_interface_init &rArr; IIC_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Init
</UL>

<P><STRONG><a name="[ef]"></a>bmi2_map_data_int</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_map_data_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = bmi2_map_data_int &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Init
</UL>

<P><STRONG><a name="[144]"></a>bmi2_parse_sensor_data</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_parse_sensor_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bmi2_parse_sensor_data &rArr; get_remapped_data
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_remapped_data
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_acc_gyr_data
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comp_gyro_cross_axis_sensitivity
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[136]"></a>bmi2_read_aux_man_mode</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, bmi2.o(i.bmi2_read_aux_man_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = bmi2_read_aux_man_mode &rArr; read_aux_data &rArr; set_if_aux_not_busy &rArr; bmi2_get_status &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_aux_data
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_aux_i2c_read
</UL>

<P><STRONG><a name="[12c]"></a>bmi2_sec_init</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_sec_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = bmi2_sec_init &rArr; bmi2_soft_reset &rArr; bmi2_write_config_file &rArr; write_config_file &rArr; bmi2_set_adv_power_save &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_soft_reset
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_init
</UL>

<P><STRONG><a name="[135]"></a>bmi2_sensor_disable</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_sensor_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = bmi2_sensor_disable &rArr; sensor_disable &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_sensor
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_aux_conf
</UL>

<P><STRONG><a name="[ee]"></a>bmi2_sensor_enable</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_sensor_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = bmi2_sensor_enable &rArr; sensor_enable &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_sensor
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Init
</UL>

<P><STRONG><a name="[13c]"></a>bmi2_set_adv_power_save</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, bmi2.o(i.bmi2_set_adv_power_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bmi2_set_adv_power_save &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_aux_man_mode
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_read_aux_man_mode
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feature_data
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_config_file
</UL>

<P><STRONG><a name="[eb]"></a>bmi2_set_regs</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, bmi2.o(i.bmi2_set_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bmi2_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_aux_man_mode
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_soft_reset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_map_data_int
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_file
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if_aux_not_busy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain_config
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_config
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_load
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aux_config
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_config
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_aux_interface
</UL>

<P><STRONG><a name="[12f]"></a>bmi2_set_sensor_config</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_set_sensor_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = bmi2_set_sensor_config &rArr; set_gyro_user_gain_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain_config
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_config
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aux_config
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_config
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_aux_conf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_accel_gyro_conf
</UL>

<P><STRONG><a name="[14a]"></a>bmi2_soft_reset</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_soft_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = bmi2_soft_reset &rArr; bmi2_write_config_file &rArr; write_config_file &rArr; bmi2_set_adv_power_save &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_config_file
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sec_init
</UL>

<P><STRONG><a name="[137]"></a>bmi2_write_aux_man_mode</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, bmi2.o(i.bmi2_write_aux_man_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = bmi2_write_aux_man_mode &rArr; set_if_aux_not_busy &rArr; bmi2_get_status &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if_aux_not_busy
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_aux_i2c_write
</UL>

<P><STRONG><a name="[152]"></a>bmi2_write_config_file</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, bmi2.o(i.bmi2_write_config_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = bmi2_write_config_file &rArr; write_config_file &rArr; bmi2_set_adv_power_save &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_internal_status
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_config_file
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_soft_reset
</UL>

<P><STRONG><a name="[155]"></a>bmm350_delay_us</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bmm350.o(i.bmm350_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bmm350_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_set_powermode
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_set_odr_performance
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_magnetic_reset_and_wait
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_powermode
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_otp_word
</UL>

<P><STRONG><a name="[133]"></a>bmm350_enable_axes</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, bmm350.o(i.bmm350_enable_axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bmm350_enable_axes &rArr; bmm350_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_set_regs
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_aux_conf
</UL>

<P><STRONG><a name="[131]"></a>bmm350_error_codes_print_result</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, bmi270_bmm350.o(i.bmm350_error_codes_print_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bmm350_error_codes_print_result &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_aux_conf
</UL>

<P><STRONG><a name="[f4]"></a>bmm350_get_compensated_mag_xyz_temp_data</STRONG> (Thumb, 470 bytes, Stack size 96 bytes, bmm350.o(i.bmm350_get_compensated_mag_xyz_temp_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = bmm350_get_compensated_mag_xyz_temp_data &rArr; read_out_raw_data &rArr; bmm350_read_uncomp_mag_temp_data &rArr; bmm350_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_out_raw_data
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_ReadData
</UL>

<P><STRONG><a name="[159]"></a>bmm350_get_pmu_cmd_status_0</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bmm350.o(i.bmm350_get_pmu_cmd_status_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bmm350_get_pmu_cmd_status_0 &rArr; bmm350_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_magnetic_reset_and_wait
</UL>

<P><STRONG><a name="[15a]"></a>bmm350_get_regs</STRONG> (Thumb, 94 bytes, Stack size 160 bytes, bmm350.o(i.bmm350_get_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bmm350_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_set_powermode
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_read_uncomp_mag_temp_data
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_get_pmu_cmd_status_0
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_powermode
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_otp_word
</UL>

<P><STRONG><a name="[130]"></a>bmm350_init</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, bmm350.o(i.bmm350_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = bmm350_init &rArr; bmm350_magnetic_reset_and_wait &rArr; bmm350_set_powermode &rArr; set_powermode &rArr; bmm350_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_set_regs
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_magnetic_reset_and_wait
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_get_regs
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_delay_us
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mag_off_sens
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_otp_word
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_aux_conf
</UL>

<P><STRONG><a name="[15d]"></a>bmm350_magnetic_reset_and_wait</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, bmm350.o(i.bmm350_magnetic_reset_and_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = bmm350_magnetic_reset_and_wait &rArr; bmm350_set_powermode &rArr; set_powermode &rArr; bmm350_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_set_regs
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_set_powermode
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_get_pmu_cmd_status_0
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_delay_us
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_init
</UL>

<P><STRONG><a name="[15e]"></a>bmm350_read_uncomp_mag_temp_data</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, bmm350.o(i.bmm350_read_uncomp_mag_temp_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = bmm350_read_uncomp_mag_temp_data &rArr; bmm350_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_get_regs
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_sign
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_out_raw_data
</UL>

<P><STRONG><a name="[132]"></a>bmm350_set_odr_performance</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bmm350.o(i.bmm350_set_odr_performance))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bmm350_set_odr_performance &rArr; bmm350_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_set_regs
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_delay_us
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_aux_conf
</UL>

<P><STRONG><a name="[134]"></a>bmm350_set_powermode</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, bmm350.o(i.bmm350_set_powermode))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = bmm350_set_powermode &rArr; set_powermode &rArr; bmm350_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_set_regs
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_get_regs
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_delay_us
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_powermode
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_magnetic_reset_and_wait
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_aux_conf
</UL>

<P><STRONG><a name="[157]"></a>bmm350_set_regs</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, bmm350.o(i.bmm350_set_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bmm350_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_set_powermode
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_set_odr_performance
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_magnetic_reset_and_wait
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_enable_axes
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_powermode
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_otp_word
</UL>

<P><STRONG><a name="[161]"></a>bmp5_get_iir_config</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bmp5.o(i.bmp5_get_iir_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bmp5_get_iir_config &rArr; bmp5_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_get_power_mode
</UL>

<P><STRONG><a name="[163]"></a>bmp5_get_interrupt_status</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bmp5.o(i.bmp5_get_interrupt_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bmp5_get_interrupt_status &rArr; bmp5_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_init
</UL>

<P><STRONG><a name="[164]"></a>bmp5_get_osr_odr_press_config</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bmp5.o(i.bmp5_get_osr_odr_press_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bmp5_get_osr_odr_press_config &rArr; bmp5_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_get_power_mode
</UL>

<P><STRONG><a name="[165]"></a>bmp5_get_power_mode</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, bmp5.o(i.bmp5_get_power_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bmp5_get_power_mode &rArr; bmp5_get_osr_odr_press_config &rArr; bmp5_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_get_regs
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_get_osr_odr_press_config
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_get_iir_config
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_set_power_mode
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_standby_mode
</UL>

<P><STRONG><a name="[162]"></a>bmp5_get_regs</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, bmp5.o(i.bmp5_get_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bmp5_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_soft_reset
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_set_osr_odr_press_config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_get_sensor_data
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_get_power_mode
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_get_osr_odr_press_config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_get_interrupt_status
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_get_iir_config
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_power_mode
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_deep_standby_mode
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nvm_status
</UL>

<P><STRONG><a name="[8a]"></a>bmp5_get_sensor_data</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, bmp5.o(i.bmp5_get_sensor_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bmp5_get_sensor_data &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_get_regs
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP580_ReadData
</UL>

<P><STRONG><a name="[86]"></a>bmp5_init</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, bmp5.o(i.bmp5_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bmp5_init &rArr; bmp5_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_get_regs
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_get_interrupt_status
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nvm_status
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP580_Init
</UL>

<P><STRONG><a name="[87]"></a>bmp5_set_osr_odr_press_config</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, bmp5.o(i.bmp5_set_osr_odr_press_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bmp5_set_osr_odr_press_config &rArr; set_standby_mode &rArr; bmp5_set_power_mode &rArr; bmp5_get_power_mode &rArr; bmp5_get_osr_odr_press_config &rArr; bmp5_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_set_regs
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_get_regs
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_standby_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP580_Init
</UL>

<P><STRONG><a name="[88]"></a>bmp5_set_power_mode</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, bmp5.o(i.bmp5_set_power_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bmp5_set_power_mode &rArr; bmp5_get_power_mode &rArr; bmp5_get_osr_odr_press_config &rArr; bmp5_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_get_power_mode
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_power_mode
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_deep_standby_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP580_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_standby_mode
</UL>

<P><STRONG><a name="[169]"></a>bmp5_set_regs</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, bmp5.o(i.bmp5_set_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bmp5_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_soft_reset
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_set_osr_odr_press_config
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_power_mode
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_deep_standby_mode
</UL>

<P><STRONG><a name="[84]"></a>bmp5_soft_reset</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, bmp5.o(i.bmp5_soft_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bmp5_soft_reset &rArr; bmp5_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_set_regs
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP580_Init
</UL>

<P><STRONG><a name="[18a]"></a>calib_get_accel_offset</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sensor_calibration.o(i.calib_get_accel_offset))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18b]"></a>calib_get_accel_scale</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sensor_calibration.o(i.calib_get_accel_scale))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18e]"></a>calib_get_altitude_offset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sensor_calibration.o(i.calib_get_altitude_offset))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[189]"></a>calib_get_gyro_offset</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sensor_calibration.o(i.calib_get_gyro_offset))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18c]"></a>calib_get_mag_offset</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sensor_calibration.o(i.calib_get_mag_offset))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18d]"></a>calib_get_sea_level_pressure</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sensor_calibration.o(i.calib_get_sea_level_pressure))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>delay_ms</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP580_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_interface_init
</UL>

<P><STRONG><a name="[d1]"></a>delay_us</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp580_delay_us
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_delay_us
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Wait_Ack
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Stop
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Start
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Send_Byte
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Read_Byte
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_NAck
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Ack
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_aux_delay_us
</UL>

<P><STRONG><a name="[11a]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[60]"></a>fputc</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, usart_printf.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = fputc &rArr; uart_tx_start_dma &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_start_dma
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[176]"></a>fusion_get_attitude</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fusion_filter.o(i.fusion_get_attitude))
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18f]"></a>fusion_get_debug_info</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fusion_filter.o(i.fusion_get_debug_info))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[178]"></a>fusion_init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, fusion_filter.o(i.fusion_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fusion_init &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[188]"></a>fusion_set_gyro_bias</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fusion_filter.o(i.fusion_set_gyro_bias))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[179]"></a>fusion_set_params</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, fusion_filter.o(i.fusion_set_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fusion_set_params &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17a]"></a>fusion_update</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, fusion_filter.o(i.fusion_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = fusion_update &rArr; correct_from_mag &rArr; quaternion_to_euler &rArr; __hardfp_asinf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_from_gyro
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quaternion_to_euler
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_from_mag
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_from_accel
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_acc_confidence
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17c]"></a>fusion_use_magnetometer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fusion_filter.o(i.fusion_use_magnetometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fusion_use_magnetometer &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>main</STRONG> (Thumb, 3252 bytes, Stack size 224 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = main &rArr; perform_gyro_calibration &rArr; IMU_ReadData &rArr; bmm350_get_compensated_mag_xyz_temp_data &rArr; read_out_raw_data &rArr; bmm350_read_uncomp_mag_temp_data &rArr; bmm350_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_printf_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_simple_calibration
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_quick_gyro_calibration
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_has_valid_calibration
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_get_calibration_status
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusion_use_magnetometer
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusion_update
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusion_set_params
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusion_set_gyro_bias
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusion_init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusion_get_debug_info
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusion_get_attitude
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_get_sea_level_pressure
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_get_mag_offset
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_get_gyro_offset
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_get_altitude_offset
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_get_accel_scale
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_get_accel_offset
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_ReadData
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Delay_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP580_ReadData
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP580_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_Send_UserData
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_Send_Attitude
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_gyro_calibration
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[187]"></a>perform_gyro_calibration</STRONG> (Thumb, 250 bytes, Stack size 112 bytes, main.o(i.perform_gyro_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = perform_gyro_calibration &rArr; IMU_ReadData &rArr; bmm350_get_compensated_mag_xyz_temp_data &rArr; read_out_raw_data &rArr; bmm350_read_uncomp_mag_temp_data &rArr; bmm350_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_ReadData
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[184]"></a>sensor_get_calibration_status</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, sensor_calibration.o(i.sensor_get_calibration_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sensor_get_calibration_status &rArr; load_simple_calib_data &rArr; simple_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_simple_calib_data
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[183]"></a>sensor_has_valid_calibration</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sensor_calibration.o(i.sensor_has_valid_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sensor_has_valid_calibration &rArr; load_simple_calib_data &rArr; simple_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_simple_calib_data
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[186]"></a>sensor_quick_gyro_calibration</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, sensor_calibration.o(i.sensor_quick_gyro_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sensor_quick_gyro_calibration &rArr; save_simple_calib_data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_simple_calib_data
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_simple_calib_data
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[185]"></a>sensor_simple_calibration</STRONG> (Thumb, 686 bytes, Stack size 72 bytes, sensor_calibration.o(i.sensor_simple_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sensor_simple_calibration &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_simple_calib_data
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[109]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[182]"></a>usart_printf_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usart_printf.o(i.usart_printf_init))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a8]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[a6]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32g4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[a7]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32g4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[8d]"></a>DMA_CalcDMAMUXChannelBaseAndMask</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32g4xx_hal_dma.o(i.DMA_CalcDMAMUXChannelBaseAndMask))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[8e]"></a>DMA_CalcDMAMUXRequestGenBaseAndMask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32g4xx_hal_dma.o(i.DMA_CalcDMAMUXRequestGenBaseAndMask))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[90]"></a>DMA_SetConfig</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32g4xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[9a]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[57]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32g4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[5a]"></a>UART_DMAError</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32g4xx_hal_uart.o(i.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_DMAError &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32g4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
<LI> stm32g4xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[5e]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32g4xx_hal_uart.o(i.UART_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[5f]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32g4xx_hal_uart.o(i.UART_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMARxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[58]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32g4xx_hal_uart.o(i.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_DMATransmitCplt &rArr; HAL_UART_TxCpltCallback &rArr; uart_tx_start_dma &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[59]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g4xx_hal_uart.o(i.UART_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[ba]"></a>UART_EndRxTransfer</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32g4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[ff]"></a>UART_EndTxTransfer</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32g4xx_hal_uart.o(i.UART_EndTxTransfer))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[b7]"></a>UARTEx_SetNbDataToProcess</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32g4xx_hal_uart_ex.o(i.UARTEx_SetNbDataToProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
</UL>

<P><STRONG><a name="[16e]"></a>cfg_error_status</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bmi2.o(i.cfg_error_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = cfg_error_status &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_config
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_config
</UL>

<P><STRONG><a name="[193]"></a>check_boundary_val</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, bmi2.o(i.check_boundary_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = check_boundary_val
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_config
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aux_config
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_config
</UL>

<P><STRONG><a name="[148]"></a>comp_gyro_cross_axis_sensitivity</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bmi2.o(i.comp_gyro_cross_axis_sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = comp_gyro_cross_axis_sensitivity
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_parse_sensor_data
</UL>

<P><STRONG><a name="[16f]"></a>config_aux_interface</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, bmi2.o(i.config_aux_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = config_aux_interface &rArr; bmi2_get_status &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_status
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aux_config
</UL>

<P><STRONG><a name="[17d]"></a>extract_output_feat_config</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, bmi2.o(i.extract_output_feat_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_gain_update_status
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_cross_sense
</UL>

<P><STRONG><a name="[146]"></a>get_acc_gyr_data</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bmi2.o(i.get_acc_gyr_data))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_parse_sensor_data
</UL>

<P><STRONG><a name="[140]"></a>get_accel_config</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bmi2.o(i.get_accel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = get_accel_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[142]"></a>get_aux_interface_config</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, bmi2.o(i.get_aux_interface_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = get_aux_interface_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[141]"></a>get_gyro_config</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, bmi2.o(i.get_gyro_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = get_gyro_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[13d]"></a>get_gyro_cross_sense</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, bmi2.o(i.get_gyro_cross_sense))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = get_gyro_cross_sense &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feature_data
</UL>

<P><STRONG><a name="[143]"></a>get_gyro_gain_update_config</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, bmi2.o(i.get_gyro_gain_update_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = get_gyro_gain_update_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[13e]"></a>get_gyro_gain_update_status</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, bmi2.o(i.get_gyro_gain_update_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = get_gyro_gain_update_status &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feature_data
</UL>

<P><STRONG><a name="[147]"></a>get_remapped_data</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bmi2.o(i.get_remapped_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_remapped_data
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_parse_sensor_data
</UL>

<P><STRONG><a name="[13b]"></a>null_ptr_check</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bmi2.o(i.null_ptr_check))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_config_file
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_aux_man_mode
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_soft_reset
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_enable
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_disable
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sec_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_read_aux_man_mode
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_parse_sensor_data
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_status
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_internal_status
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_gyro_cross_sense
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feature_data
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_config
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_config
</UL>

<P><STRONG><a name="[149]"></a>read_aux_data</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, bmi2.o(i.read_aux_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = read_aux_data &rArr; set_if_aux_not_busy &rArr; bmi2_get_status &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if_aux_not_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_read_aux_man_mode
</UL>

<P><STRONG><a name="[14b]"></a>select_sensor</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, bmi2.o(i.select_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = select_sensor
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_enable
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_disable
</UL>

<P><STRONG><a name="[14c]"></a>sensor_disable</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, bmi2.o(i.sensor_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sensor_disable &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_disable
</UL>

<P><STRONG><a name="[14d]"></a>sensor_enable</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, bmi2.o(i.sensor_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sensor_enable &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_enable
</UL>

<P><STRONG><a name="[14e]"></a>set_accel_config</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, bmi2.o(i.set_accel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = set_accel_config &rArr; cfg_error_status &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_boundary_val
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_error_status
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[150]"></a>set_aux_config</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, bmi2.o(i.set_aux_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = set_aux_config &rArr; config_aux_interface &rArr; bmi2_get_status &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_aux_interface
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_boundary_val
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[194]"></a>set_config_load</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bmi2.o(i.set_config_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = set_config_load &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_config_file
</UL>

<P><STRONG><a name="[14f]"></a>set_gyro_config</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, bmi2.o(i.set_gyro_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_gyro_config &rArr; cfg_error_status &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_boundary_val
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_error_status
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[151]"></a>set_gyro_user_gain_config</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, bmi2.o(i.set_gyro_user_gain_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = set_gyro_user_gain_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[153]"></a>set_if_aux_not_busy</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, bmi2.o(i.set_if_aux_not_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = set_if_aux_not_busy &rArr; bmi2_get_status &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_aux_man_mode
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_aux_data
</UL>

<P><STRONG><a name="[195]"></a>upload_file</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, bmi2.o(i.upload_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = upload_file &rArr; bmi2_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_config_file
</UL>

<P><STRONG><a name="[154]"></a>write_config_file</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, bmi2.o(i.write_config_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = write_config_file &rArr; bmi2_set_adv_power_save &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_file
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_load
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_config_file
</UL>

<P><STRONG><a name="[12b]"></a>null_ptr_check</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bmi270.o(i.null_ptr_check))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_init
</UL>

<P><STRONG><a name="[15f]"></a>fix_sign</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, bmm350.o(i.fix_sign))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_read_uncomp_mag_temp_data
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mag_off_sens
</UL>

<P><STRONG><a name="[156]"></a>null_ptr_check</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bmm350.o(i.null_ptr_check))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_set_regs
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_set_powermode
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_set_odr_performance
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_magnetic_reset_and_wait
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_get_regs
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_enable_axes
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_delay_us
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_powermode
</UL>

<P><STRONG><a name="[15b]"></a>read_otp_word</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, bmm350.o(i.read_otp_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = read_otp_word &rArr; bmm350_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_set_regs
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_get_regs
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_init
</UL>

<P><STRONG><a name="[158]"></a>read_out_raw_data</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, bmm350.o(i.read_out_raw_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = read_out_raw_data &rArr; bmm350_read_uncomp_mag_temp_data &rArr; bmm350_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_read_uncomp_mag_temp_data
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_default_coefiecents
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_get_compensated_mag_xyz_temp_data
</UL>

<P><STRONG><a name="[160]"></a>set_powermode</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, bmm350.o(i.set_powermode))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = set_powermode &rArr; bmm350_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_set_regs
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_get_regs
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_delay_us
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_set_powermode
</UL>

<P><STRONG><a name="[191]"></a>update_default_coefiecents</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bmm350.o(i.update_default_coefiecents))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_out_raw_data
</UL>

<P><STRONG><a name="[15c]"></a>update_mag_off_sens</STRONG> (Thumb, 574 bytes, Stack size 32 bytes, bmm350.o(i.update_mag_off_sens))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = update_mag_off_sens
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_sign
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_init
</UL>

<P><STRONG><a name="[ce]"></a>uart_tx_start_dma</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, usart_printf.o(i.uart_tx_start_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uart_tx_start_dma &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[7c]"></a>ANO_Build_Frame</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, anony_protocol.o(i.ANO_Build_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ANO_Build_Frame &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_Send_UserData
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_Send_Attitude
</UL>

<P><STRONG><a name="[167]"></a>get_nvm_status</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bmp5.o(i.get_nvm_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_nvm_status &rArr; bmp5_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_init
</UL>

<P><STRONG><a name="[166]"></a>null_ptr_check</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bmp5.o(i.null_ptr_check))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_set_regs
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_get_regs
</UL>

<P><STRONG><a name="[16b]"></a>set_deep_standby_mode</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, bmp5.o(i.set_deep_standby_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = set_deep_standby_mode &rArr; bmp5_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_set_regs
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_set_power_mode
</UL>

<P><STRONG><a name="[16a]"></a>set_power_mode</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bmp5.o(i.set_power_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = set_power_mode &rArr; bmp5_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_set_regs
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_set_power_mode
</UL>

<P><STRONG><a name="[168]"></a>set_standby_mode</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bmp5.o(i.set_standby_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = set_standby_mode &rArr; bmp5_set_power_mode &rArr; bmp5_get_power_mode &rArr; bmp5_get_osr_odr_press_config &rArr; bmp5_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_set_power_mode
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_get_power_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp5_set_osr_odr_press_config
</UL>

<P><STRONG><a name="[56]"></a>bmp580_delay_us</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bmp5_port.o(i.bmp580_delay_us))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bmp5_port.o(i.BMP580_Init)
</UL>
<P><STRONG><a name="[54]"></a>bmp580_i2c_read</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bmp5_port.o(i.bmp580_i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bmp580_i2c_read &rArr; I2C2_Read_nByte &rArr; I2C2_Wait_Ack &rArr; I2C2_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Read_nByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bmp5_port.o(i.BMP580_Init)
</UL>
<P><STRONG><a name="[55]"></a>bmp580_i2c_write</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bmp5_port.o(i.bmp580_i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bmp580_i2c_write &rArr; I2C2_Write_nByte &rArr; I2C2_Wait_Ack &rArr; I2C2_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Write_nByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bmp5_port.o(i.BMP580_Init)
</UL>
<P><STRONG><a name="[ec]"></a>bmi2_accel_gyro_conf</STRONG> (Thumb, 106 bytes, Stack size 136 bytes, bmi270_bmm350.o(i.bmi2_accel_gyro_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = bmi2_accel_gyro_conf &rArr; bmi2_get_sensor_config &rArr; get_gyro_gain_update_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_error_codes_print_result
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Init
</UL>

<P><STRONG><a name="[ed]"></a>bmi2_aux_conf</STRONG> (Thumb, 292 bytes, Stack size 88 bytes, bmi270_bmm350.o(i.bmi2_aux_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = bmi2_aux_conf &rArr; bmm350_init &rArr; bmm350_magnetic_reset_and_wait &rArr; bmm350_set_powermode &rArr; set_powermode &rArr; bmm350_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_set_powermode
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_set_odr_performance
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_enable_axes
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_error_codes_print_result
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm350_error_codes_print_result
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_disable
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Init
</UL>

<P><STRONG><a name="[5d]"></a>bmi2_aux_delay_us</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bmi270_bmm350.o(i.bmi2_aux_delay_us))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bmi270_bmm350.o(i.IMU_Init)
</UL>
<P><STRONG><a name="[5b]"></a>bmi2_aux_i2c_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bmi270_bmm350.o(i.bmi2_aux_i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = bmi2_aux_i2c_read &rArr; bmi2_read_aux_man_mode &rArr; read_aux_data &rArr; set_if_aux_not_busy &rArr; bmi2_get_status &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_read_aux_man_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bmi270_bmm350.o(i.IMU_Init)
</UL>
<P><STRONG><a name="[5c]"></a>bmi2_aux_i2c_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bmi270_bmm350.o(i.bmi2_aux_i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = bmi2_aux_i2c_write &rArr; bmi2_write_aux_man_mode &rArr; set_if_aux_not_busy &rArr; bmi2_get_status &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_aux_man_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bmi270_bmm350.o(i.IMU_Init)
</UL>
<P><STRONG><a name="[f3]"></a>lsb_to_dps</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bmi270_bmm350.o(i.lsb_to_dps))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lsb_to_dps &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_ReadData
</UL>

<P><STRONG><a name="[f2]"></a>lsb_to_mps2</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, bmi270_bmm350.o(i.lsb_to_mps2))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lsb_to_mps2 &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_ReadData
</UL>

<P><STRONG><a name="[17f]"></a>load_simple_calib_data</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sensor_calibration.o(i.load_simple_calib_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = load_simple_calib_data &rArr; simple_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_quick_gyro_calibration
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_has_valid_calibration
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_get_calibration_status
</UL>

<P><STRONG><a name="[192]"></a>save_simple_calib_data</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sensor_calibration.o(i.save_simple_calib_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = save_simple_calib_data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_crc32
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_simple_calibration
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_quick_gyro_calibration
</UL>

<P><STRONG><a name="[180]"></a>simple_crc32</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sensor_calibration.o(i.simple_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = simple_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_simple_calib_data
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_simple_calib_data
</UL>

<P><STRONG><a name="[16c]"></a>calculate_acc_confidence</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fusion_filter.o(i.calculate_acc_confidence))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = calculate_acc_confidence &rArr; vector_norm &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector_norm
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fminf
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusion_update
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_from_accel
</UL>

<P><STRONG><a name="[170]"></a>correct_from_accel</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, fusion_filter.o(i.correct_from_accel))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = correct_from_accel &rArr; quaternion_normalize &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector_norm
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quaternion_normalize
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_acc_confidence
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusion_update
</UL>

<P><STRONG><a name="[172]"></a>correct_from_mag</STRONG> (Thumb, 568 bytes, Stack size 40 bytes, fusion_filter.o(i.correct_from_mag))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = correct_from_mag &rArr; quaternion_to_euler &rArr; __hardfp_asinf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector_norm
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quaternion_to_euler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quaternion_normalize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusion_update
</UL>

<P><STRONG><a name="[171]"></a>quaternion_normalize</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, fusion_filter.o(i.quaternion_normalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = quaternion_normalize &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_from_gyro
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_from_mag
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_from_accel
</UL>

<P><STRONG><a name="[175]"></a>quaternion_to_euler</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, fusion_filter.o(i.quaternion_to_euler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = quaternion_to_euler &rArr; __hardfp_asinf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusion_update
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_from_mag
</UL>

<P><STRONG><a name="[17b]"></a>update_from_gyro</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, fusion_filter.o(i.update_from_gyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = update_from_gyro &rArr; quaternion_normalize &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quaternion_normalize
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusion_update
</UL>

<P><STRONG><a name="[16d]"></a>vector_norm</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fusion_filter.o(i.vector_norm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vector_norm &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_from_mag
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_from_accel
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_acc_confidence
</UL>

<P><STRONG><a name="[127]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[106]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[129]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[128]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[61]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
